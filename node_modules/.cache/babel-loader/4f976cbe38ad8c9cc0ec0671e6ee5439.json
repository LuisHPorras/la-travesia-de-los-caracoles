{"remainingRequest":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/babel-loader/lib/index.js!/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/src/components/HParallaxImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/src/components/HParallaxImage.vue","mtime":1553201081747},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport HParallaxElement from './HParallaxElement.vue';\nexport default {\n  name: 'HParallaxImage',\n  components: {\n    HParallaxElement: HParallaxElement\n  },\n  props: {\n    width: {\n      required: true,\n      type: Number\n    },\n    height: {\n      required: true,\n      type: Number\n    },\n    factor: {\n      default: 0.25,\n      type: Number\n    }\n  },\n  data: function data() {\n    return {\n      innerWidth: 0\n    };\n  },\n  computed: {\n    aspectRatio: function aspectRatio() {\n      return this.height / this.width;\n    },\n    compensatedFactor: function compensatedFactor() {\n      // Because the parallax effect is relative\n      // to the containers height and because we\n      // shrink the containers height by the given\n      // factor, we have to compensate this by\n      // increasing the factor.\n      return this.factor * 2;\n    },\n    compensatedWidth: function compensatedWidth() {\n      // We want the image to scroll inside of a\n      // container to prevent the image scrolling\n      // above its sourounding elements. The\n      // container must be shrinked by the given\n      // factor to make sure we don't have any\n      // whitespace when scrolling.\n      return this.innerWidth - this.innerWidth * this.factor;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.setInnerWidth();\n\n    var eventHandler = function eventHandler() {\n      return requestAnimationFrame(_this.setInnerWidth);\n    };\n\n    window.addEventListener('resize', eventHandler);\n    this.$on('hook:destroyed', function () {\n      window.removeEventListener('resize', eventHandler);\n    });\n  },\n  methods: {\n    setInnerWidth: function setInnerWidth() {\n      this.innerWidth = this.$refs.inside.getBoundingClientRect().width;\n    }\n  }\n};",{"version":3,"sources":["HParallaxImage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAA,gBAAA,MAAA,wBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA,KADA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA,KALA;AASA,IAAA,MAAA,EAAA;AACA,MAAA,OAAA,EAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA;AATA,GALA;AAmBA,EAAA,IAnBA,kBAmBA;AACA,WAAA;AACA,MAAA,UAAA,EAAA;AADA,KAAA;AAGA,GAvBA;AAwBA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA,GAAA,KAAA,KAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AACA;AACA;AACA;AACA;AACA;AACA,aAAA,KAAA,MAAA,GAAA,CAAA;AACA,KAXA;AAYA,IAAA,gBAZA,8BAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAA,KAAA,UAAA,GAAA,KAAA,UAAA,GAAA,KAAA,MAAA;AACA;AApBA,GAxBA;AA8CA,EAAA,OA9CA,qBA8CA;AAAA;;AACA,SAAA,aAAA;;AAEA,QAAA,YAAA,GAAA,SAAA,YAAA;AAAA,aAAA,qBAAA,CAAA,KAAA,CAAA,aAAA,CAAA;AAAA,KAAA;;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,YAAA;AACA,SAAA,GAAA,CAAA,gBAAA,EAAA,YAAA;AACA,MAAA,MAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,YAAA;AACA,KAFA;AAGA,GAtDA;AAuDA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,WAAA,UAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,qBAAA,GAAA,KAAA;AACA;AAHA;AAvDA,CAAA","sourcesContent":["<template>\n  <div\n    :style=\"{\n      width: `${compensatedWidth}px`,\n    }\"\n    class=\"HParallaxImage\"\n  >\n    <HParallaxElement\n      :factor=\"compensatedFactor\"\n      :style=\"{\n        paddingLeft: `${aspectRatio * 100}%`,\n      }\"\n      class=\"HParallaxImage__aspect-ratio-wrap\"\n    >\n      <div\n        ref=\"inside\"\n        class=\"HParallaxImage__aspect-ratio-inside\"\n      >\n        <slot/>\n      </div>\n    </HParallaxElement>\n  </div>\n</template>\n\n<script>\nimport HParallaxElement from './HParallaxElement.vue'\n\nexport default {\n  name: 'HParallaxImage',\n  components: {\n    HParallaxElement\n  },\n  props: {\n    width: {\n      required: true,\n      type: Number\n    },\n    height: {\n      required: true,\n      type: Number\n    },\n    factor: {\n      default: 0.25,\n      type: Number\n    }\n  },\n  data () {\n    return {\n      innerWidth: 0\n    }\n  },\n  computed: {\n    aspectRatio () {\n      return this.height / this.width\n    },\n    compensatedFactor () {\n      // Because the parallax effect is relative\n      // to the containers height and because we\n      // shrink the containers height by the given\n      // factor, we have to compensate this by\n      // increasing the factor.\n      return this.factor * 2\n    },\n    compensatedWidth () {\n      // We want the image to scroll inside of a\n      // container to prevent the image scrolling\n      // above its sourounding elements. The\n      // container must be shrinked by the given\n      // factor to make sure we don't have any\n      // whitespace when scrolling.\n      return this.innerWidth - (this.innerWidth * this.factor)\n    }\n  },\n  mounted () {\n    this.setInnerWidth()\n\n    const eventHandler = () => requestAnimationFrame(this.setInnerWidth)\n    window.addEventListener('resize', eventHandler)\n    this.$on('hook:destroyed', () => {\n      window.removeEventListener('resize', eventHandler)\n    })\n  },\n  methods: {\n    setInnerWidth () {\n      this.innerWidth = this.$refs.inside.getBoundingClientRect().width\n    }\n  }\n}\n</script>\n\n<style>\n.HParallaxImage__aspect-ratio-wrap {\n  position: relative;\n  left: -100%;\n  width: 0;\n  overflow: hidden;\n}\n\n.HParallaxImage__aspect-ratio-inside {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"src/components"}]}