{"remainingRequest":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/src/components/HParallaxImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/src/components/HParallaxImage.vue","mtime":1553201081747},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lhp/workspace/src/github.com/la-travesia-de-los-caracoles/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport HParallaxElement from './HParallaxElement.vue'\n\nexport default {\n  name: 'HParallaxImage',\n  components: {\n    HParallaxElement\n  },\n  props: {\n    width: {\n      required: true,\n      type: Number\n    },\n    height: {\n      required: true,\n      type: Number\n    },\n    factor: {\n      default: 0.25,\n      type: Number\n    }\n  },\n  data () {\n    return {\n      innerWidth: 0\n    }\n  },\n  computed: {\n    aspectRatio () {\n      return this.height / this.width\n    },\n    compensatedFactor () {\n      // Because the parallax effect is relative\n      // to the containers height and because we\n      // shrink the containers height by the given\n      // factor, we have to compensate this by\n      // increasing the factor.\n      return this.factor * 2\n    },\n    compensatedWidth () {\n      // We want the image to scroll inside of a\n      // container to prevent the image scrolling\n      // above its sourounding elements. The\n      // container must be shrinked by the given\n      // factor to make sure we don't have any\n      // whitespace when scrolling.\n      return this.innerWidth - (this.innerWidth * this.factor)\n    }\n  },\n  mounted () {\n    this.setInnerWidth()\n\n    const eventHandler = () => requestAnimationFrame(this.setInnerWidth)\n    window.addEventListener('resize', eventHandler)\n    this.$on('hook:destroyed', () => {\n      window.removeEventListener('resize', eventHandler)\n    })\n  },\n  methods: {\n    setInnerWidth () {\n      this.innerWidth = this.$refs.inside.getBoundingClientRect().width\n    }\n  }\n}\n",{"version":3,"sources":["HParallaxImage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HParallaxImage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    :style=\"{\n      width: `${compensatedWidth}px`,\n    }\"\n    class=\"HParallaxImage\"\n  >\n    <HParallaxElement\n      :factor=\"compensatedFactor\"\n      :style=\"{\n        paddingLeft: `${aspectRatio * 100}%`,\n      }\"\n      class=\"HParallaxImage__aspect-ratio-wrap\"\n    >\n      <div\n        ref=\"inside\"\n        class=\"HParallaxImage__aspect-ratio-inside\"\n      >\n        <slot/>\n      </div>\n    </HParallaxElement>\n  </div>\n</template>\n\n<script>\nimport HParallaxElement from './HParallaxElement.vue'\n\nexport default {\n  name: 'HParallaxImage',\n  components: {\n    HParallaxElement\n  },\n  props: {\n    width: {\n      required: true,\n      type: Number\n    },\n    height: {\n      required: true,\n      type: Number\n    },\n    factor: {\n      default: 0.25,\n      type: Number\n    }\n  },\n  data () {\n    return {\n      innerWidth: 0\n    }\n  },\n  computed: {\n    aspectRatio () {\n      return this.height / this.width\n    },\n    compensatedFactor () {\n      // Because the parallax effect is relative\n      // to the containers height and because we\n      // shrink the containers height by the given\n      // factor, we have to compensate this by\n      // increasing the factor.\n      return this.factor * 2\n    },\n    compensatedWidth () {\n      // We want the image to scroll inside of a\n      // container to prevent the image scrolling\n      // above its sourounding elements. The\n      // container must be shrinked by the given\n      // factor to make sure we don't have any\n      // whitespace when scrolling.\n      return this.innerWidth - (this.innerWidth * this.factor)\n    }\n  },\n  mounted () {\n    this.setInnerWidth()\n\n    const eventHandler = () => requestAnimationFrame(this.setInnerWidth)\n    window.addEventListener('resize', eventHandler)\n    this.$on('hook:destroyed', () => {\n      window.removeEventListener('resize', eventHandler)\n    })\n  },\n  methods: {\n    setInnerWidth () {\n      this.innerWidth = this.$refs.inside.getBoundingClientRect().width\n    }\n  }\n}\n</script>\n\n<style>\n.HParallaxImage__aspect-ratio-wrap {\n  position: relative;\n  left: -100%;\n  width: 0;\n  overflow: hidden;\n}\n\n.HParallaxImage__aspect-ratio-inside {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}